Brackets:
[] Ordering
<> Matching
{} Counting
() Capturing

Matching: (matching with id can only match a previous id)
Anything                <*>
Type                    <#type>
TextRegex               <~regex>
Structure               <=id>
Identical               <==id>
And                     [m&m]
Or                      [m|m]

Ordering: (multiple matchers must be explicitly grouped)
Order multiple          [[[m&m]|[m&m]]&m]

Capturing:
Capture a node by id    (id:m)

Counting:
Children:
Zero or One             m->?
Zero or More            m->*
One or More             m->+
One of the counts       m->{exact|exact}
At least the min        m->{min,}
At most the max         m->{,max}
Between inclusive       m->{min,max}

Descendant depth:
Exactly one (child)     m->
One or more             m{->+}
One of the counts       m{->exact|exact}
At least the min        m{->min,}
At most the max         m{->,max}
Between inclusive       m{->min,max}


Examples:

Capture any node and grandchildren where the node has exactly 2 grandchildren of type "gc" which match the regex
(grandparent:<*>){->2}[<#gc>&<~*re?n{3}t>]{2}

Capture any class and methods where the class has any method and at least one other method with the same structure
(class:<#class>)->(method_base:<#method>)&(method_copy:[<#method>&<=method_base>])+




Transformer             Syntax

Swap                    "id"<->"id"
Remove                  "id"->
Replace                 "id"->"id"
Add                     ->[type:"type"]

Extract Method